# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import sys
import tensorflow as tf
import random
import numpy as np
from keras.models import Sequential
from keras.layers import Conv2D
from keras.layers import MaxPooling2D
from keras.preprocessing.image import load_img
from keras.models import load_model
from keras.layers import Dense
from keras.utils import to_categorical
from keras.datasets import cifar10
from keras.layers import Flatten
from keras.layers import Dropout
from keras.optimizers import SGD
from matplotlib import pyplot
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
(trainx,trainy),(testx,testy)=cifar10.load_data()
batchsize=64
lr=0.01
optimize='SGD'
def define_model():
        model=Sequential()
        
        model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same',input_shape=(32,32,3)))
        model.add(Conv2D(64,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(MaxPooling2D((2,2)))

        model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(128,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(MaxPooling2D((2,2)))

        model.add(Conv2D(256,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(256,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(256,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(MaxPooling2D((2,2)))

        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(MaxPooling2D((2,2)))
        
        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(Conv2D(512,(3,3),activation='relu',kernel_initializer='he_uniform',padding='same'))
        model.add(MaxPooling2D((2,2)))

        model.add(Flatten())
        #model.add(Dense(512,activation='relu',kernel_initializer='he_uniform'))
        model.add(Dense(4096,activation='relu',kernel_initializer='he_uniform'))
        model.add(Dense(4096,activation='relu',kernel_initializer='he_uniform'))
        model.add(Dense(10,activation='softmax'))
        opt= SGD(lr=lr,momentum=0.9)
        model.compile(optimizer=opt,loss='categorical_crossentropy',metrics=['accuracy'])
        return model
def plotresult(his):
        pyplot.subplot(211)
        pyplot.title('accuracy')
        pyplot.plot(his.history['accuracy'],color='blue',label='train')
        pyplot.plot(his.history['val_accuracy'],color='orange',label='test')
        
        pyplot.subplot(212)
        pyplot.title('loss')
        pyplot.plot(his.history['loss'],color='blue',label='train')
        pyplot.plot(his.history['val_loss'],color='orange',label='test')

        filename=sys.argv[0].split('/')[-1]
        pyplot.savefig(filename+'_plot2.png')
        pyplot.close()

def test_model():
        traina=to_categorical(trainy)                        #doing hot encode
        testa=to_categorical(testy)
        trainx_norm=trainx/255                                               #normalize
        testx_norm=testx/255
        model=define_model()
        his=model.fit(trainx_norm,traina,epochs=20,batch_size=batchsize,validation_data=(testx_norm,testa),verbose=1)
        model.save('finalmodel.h5')
        acc=model.evaluate(testx_norm,testa,verbose=1)
        plotresult(his)
class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(445, 497)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.clicked.connect(self.button1)
        self.pushButton.setGeometry(QtCore.QRect(100, 50, 221, 31))
        self.pushButton.setObjectName("pushButton")

        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.clicked.connect(self.button2)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 130, 221, 31))
        self.pushButton_2.setObjectName("pushButton_2")
        
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.clicked.connect(self.button3)
        self.pushButton_3.setGeometry(QtCore.QRect(98, 210, 221, 31))
        self.pushButton_3.setObjectName("pushButton_3")
        
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.clicked.connect(self.button4)
        self.pushButton_4.setGeometry(QtCore.QRect(98, 280, 221, 31))
        self.pushButton_4.setObjectName("pushButton_4")

        self.pushButton_5 = QtWidgets.QPushButton(Dialog)
        self.pushButton_5.clicked.connect(self.button5)
        self.pushButton_5.setGeometry(QtCore.QRect(98, 410, 221, 31))
        self.pushButton_5.setObjectName("pushButton_5")

        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(98, 350, 221, 31))
        self.lineEdit.setObjectName("lineEdit")



        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)


    def button1(self):
        def f(x):
            return {
                0: 'airplane',
                1: 'automobile',
                2: 'bird',
                3: 'cat',
                4: 'deer',
                5: 'dog',
                6: 'frog',
                7: 'hourse',
                8: 'ship',
                9: 'truck'
            }[x]
        for i in range(9):
            k=random.randint(0,49999)
            pyplot.subplot(1,10,i+1)
            pyplot.title(f(int(trainy[k])),fontdict = {'fontsize' : 6})
            pyplot.imshow(trainx[k])
            pyplot.axis('off')
        pyplot.show()
    def button2(self):
        print('Hyperparameters:\nbatch_size:'+str(batchsize)+'\nlearning rate:'+str(lr)+'\noptimizer:'+str(optimize))
    def button3(self):
        model=define_model()
        model.summary()
    def button4(self):
        test_model()
    def button5(self):
        txt=self.lineEdit.text()
        img=testx[int(txt)]
        print(testy[int(txt)])
        img=img.reshape(1,32,32,3)
        img=img.astype('float32')
        img=img/255
        model=load_model('finalmodel.h5')
        label=['plane','car','bird','cat','deer','dog','frog','hourse','ship','truck']
        result=model.predict(img)
        result=np.array(result)
        a=result.flatten()
        pyplot.figure(figsize=(15,6))
        pyplot.subplot(121)
        pyplot.imshow(testx[int(txt)])   #test the classification with a picture
        pyplot.axis('off')
        pyplot.subplot(122)
        pyplot.bar(label,a)
        pyplot.show()
        
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "5"))
        self.lineEdit.setPlaceholderText(_translate("Dialog", "(0-9999)"))
        self.pushButton.setText(_translate("Dialog", "1.Show train image"))
        self.pushButton_2.setText(_translate("Dialog", "   2.Show Hyperparsmeter"))
        self.pushButton_3.setText(_translate("Dialog", "3.Show ModelStructure"))
        self.pushButton_4.setText(_translate("Dialog", "4.Show Accuracy"))
        self.pushButton_5.setText(_translate("Dialog", "5.Test"))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(dialog)
    dialog.show()
    sys.exit(app.exec_())
