# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/home/eddie/homework.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import math
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication
import cv2 as cv
import numpy as np

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(849, 423)
       
        
        self.frame = QtWidgets.QFrame(Dialog)
        self.frame.setGeometry(QtCore.QRect(20, 50, 181, 331))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.clicked.connect(self.image_show)
        self.pushButton.setGeometry(QtCore.QRect(10, 60, 161, 25))
        self.pushButton.setObjectName("pushButton")
        
        self.pushButton_2 = QtWidgets.QPushButton(self.frame)
        self.pushButton_2.clicked.connect(self.colorSeparation)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 130, 161, 25))
        self.pushButton_2.setObjectName("pushButton_2")
        
        self.pushButton_3 = QtWidgets.QPushButton(self.frame)
        self.pushButton_3.clicked.connect(self.imageflipping)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 200, 161, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        
        self.pushButton_4 = QtWidgets.QPushButton(self.frame)
        self.pushButton_4.clicked.connect(self.imageblending)
        self.pushButton_4.setGeometry(QtCore.QRect(10, 260, 161, 25))
        self.pushButton_4.setObjectName("pushButton_4")
        

        self.frame_2 = QtWidgets.QFrame(Dialog)
        self.frame_2.setGeometry(QtCore.QRect(220, 50, 181, 331))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_5.clicked.connect(self.medianfilter)
        self.pushButton_5.setGeometry(QtCore.QRect(10, 60, 161, 25))
        self.pushButton_5.setObjectName("pushButton_5")
        
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_6.clicked.connect(self.gaussianfilter)
        self.pushButton_6.setGeometry(QtCore.QRect(10, 140, 161, 25))
        self.pushButton_6.setObjectName("pushButton_6")
        
        self.pushButton_7 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_7.clicked.connect(self.bilateralfilter)
        self.pushButton_7.setGeometry(QtCore.QRect(10, 210, 161, 25))
        self.pushButton_7.setObjectName("pushButton_7")
        
        
        self.frame_3 = QtWidgets.QFrame(Dialog)
        self.frame_3.setGeometry(QtCore.QRect(430, 50, 161, 331))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.pushButton_8 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_8.clicked.connect(self.Gaussianfilter)
        self.pushButton_8.setGeometry(QtCore.QRect(10, 60, 141, 25))
        self.pushButton_8.setObjectName("pushButton_8")
        

        self.pushButton_9 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_9.clicked.connect(self.sobelx)
        self.pushButton_9.setGeometry(QtCore.QRect(10, 120, 141, 25))
        self.pushButton_9.setObjectName("pushButton_9")
        
        self.pushButton_10 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_10.clicked.connect(self.sobely)
        self.pushButton_10.setGeometry(QtCore.QRect(10, 190, 141, 25))
        self.pushButton_10.setObjectName("pushButton_10")
        

        self.pushButton_11 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_11.clicked.connect(self.magnitude)
        self.pushButton_11.setGeometry(QtCore.QRect(10, 260, 141, 25))
        self.pushButton_11.setObjectName("pushButton_11")
        

        self.frame_4 = QtWidgets.QFrame(Dialog)
        self.frame_4.setGeometry(QtCore.QRect(620, 50, 201, 331))
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.pushButton_12 = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_12.clicked.connect(self.transform)
        self.pushButton_12.setGeometry(QtCore.QRect(20, 270, 161, 25))
        self.pushButton_12.setObjectName("pushButton_12")
        
        self.lineEdit = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit.setGeometry(QtCore.QRect(80, 50, 113, 27))
        self.lineEdit.setObjectName("lineEdit")
        
        self.lineEdit_2 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_2.setGeometry(QtCore.QRect(80, 100, 113, 27))
        self.lineEdit_2.setObjectName("lineEdit_2")
        
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_3.setGeometry(QtCore.QRect(80, 150, 113, 27))
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_4 = QtWidgets.QLineEdit(self.frame_4)
        self.lineEdit_4.setGeometry(QtCore.QRect(80, 200, 113, 27))
        self.lineEdit_4.setObjectName("lineEdit_4")
        self.label = QtWidgets.QLabel(self.frame_4)
        self.label.setGeometry(QtCore.QRect(10, 50, 67, 17))
        self.label.setObjectName("label")
        self.textEdit_3 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_3.setGeometry(QtCore.QRect(440, 40, 141, 31))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_4.setGeometry(QtCore.QRect(650, 30, 151, 31))
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit = QtWidgets.QTextEdit(Dialog)
        self.textEdit.setGeometry(QtCore.QRect(40, 40, 151, 31))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_2 = QtWidgets.QTextEdit(Dialog)
        self.textEdit_2.setGeometry(QtCore.QRect(230, 40, 151, 31))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(630, 150, 67, 17))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(630, 200, 67, 17))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(630, 250, 67, 17))
        self.label_4.setObjectName("label_4")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    def image_show(self):
        img=cv.imread("Uncle_Roger.jpg") 
        if img is None:
            sys.exit("Could not read the image")         
        cv.imshow("uncle_roger",img)
        print("height:",img.shape[0])
        print("width:",img.shape[1])
    def colorSeparation(self):
        img=cv.imread("Flower.jpg") 
        if img is None:
            sys.exit("Could not read the image") 
        b=img.copy()
        b[:,:,1]=0   #set other channels to zero
        b[:,:,2]=0
  
        g=img.copy()
        g[:,:,0]=0   #set other channels to zero
        g[:,:,2]=0
  
        r=img.copy() 
        r[:,:,0]=0   #set other channels to zero
        r[:,:,1]=0
         
        cv.imshow("blue",b);
        cv.imshow("green",g);
        cv.imshow("red",r);
    def imageflipping(self):    
        img=cv.imread('Uncle_Roger.jpg')
        f=cv.flip(img,1)
        cv.imshow("result",f)
    def imageblending(self):
        max=100
        def update(x):        #parameter x is the value from trackbar
            alpha=x/max
            beta=(1-alpha)
            dst=cv.addWeighted(img1,alpha,img2,beta,0.0)
            cv.imshow('dst',dst)
        img1=cv.imread("Uncle_Roger.jpg")  #read image1 
        img2=cv.flip(img1,1)
        cv.namedWindow('dst')              
        update(0)
        cv.createTrackbar('alph','dst',0,max,update) 
    def medianfilter(self):
        img=cv.imread('Cat.png')
        dst=cv.medianBlur(img,7)
        cv.imshow('dst',dst)
    def gaussianfilter(self):
        img=cv.imread('Cat.png')
        dst=cv.GaussianBlur(img,(3,3),0)
        cv.imshow('dst',dst)
    def bilateralfilter(self):
        img=cv.imread('Cat.png')
        dst=cv.bilateralFilter(img,9,90,90)
        cv.imshow('dst',dst)
    global mygaussianblur
    def mygaussianblur(img):
        img2=cv.imread('Chihiro.jpg',0)
       
        pi=3.1415926
        ksize=3
        sigma=0.95 
        a=0                                                           #value come from the kernel size  
        rows,cols=(3,3)
        fltr=[[0]*cols for i in range(rows)]
        dst=[[0]*img.shape[1] for i in range(img.shape[0])]
        sum=0
        for i in range(0,ksize):                                      #make a gaussian filter 
            x=math.pow(i-1,2)
            for j in range(0,ksize):
                y=math.pow(j-1,2)
                e=math.exp(-(x+y)/(2*sigma*sigma))
                term=e/(2*pi*sigma*sigma)
                fltr[i][j]=term
                sum+=term
        for i in range(0,ksize):                                      #normalization
            for j in range(0,ksize):
                fltr[i][j]=fltr[i][j]/sum  
        for i in range(1,img.shape[0]-1):                             #using the gaussian to convolute the image
            for j in range(1,img.shape[1]-1):
                for l in range(0,ksize):
                    for m in range(0,ksize):
                        dst[i][j]+=(fltr[l][m]*img[i+l-1][j+m-1])
                img2[i][j]=dst[i][j]
        return img2
    def Gaussianfilter(self):
        img=cv.imread('Chihiro.jpg',0)                                #set the parameter to zero(grayscale)
        img2=cv.imread('Chihiro.jpg',0)
        cv.imshow('orig',img2)
        img2=mygaussianblur(img)                                      #show the origin picture
        cv.imshow('res',img2)
    global mysobelx
    def mysobelx(img2):  
        img3=cv.imread('Chihiro.jpg',0)
        dst=[[0]*img2.shape[1] for i in range(img2.shape[0])]
        ksize=3
        fltr=[[-1,0,1],[-2,0,2],[-1,0,1]]
        for i in range(1,img2.shape[0]-1):                             #using the gaussian to convolute the image
            for j in range(1,img2.shape[1]-1):
                for l in range(0,ksize):
                    for m in range(0,ksize):
                        dst[i][j]+=(fltr[l][m]*img2[i+l-1][j+m-1])
                if dst[i][j]>255:
                    dst[i][j]=255
                if dst[i][j]<0:
                    dst[i][j]=0
                img3[i][j]=dst[i][j]
        return img3
    global mysobely
    def mysobely(img2):
        img3=cv.imread('Chihiro.jpg',0)
        dst=[[0]*img2.shape[1] for i in range(img2.shape[0])]
        ksize=3
        fltr=[[1,2,1],[0,0,0],[-1,-2,-1]]
        for i in range(1,img2.shape[0]-1):                             #using the gaussian to convolute the image
            for j in range(1,img2.shape[1]-1):
                for l in range(0,ksize):
                    for m in range(0,ksize):
                        dst[i][j]+=(fltr[l][m]*img2[i+l-1][j+m-1])
                if dst[i][j]>255:
                    dst[i][j]=255
                if dst[i][j]<0:
                    dst[i][j]=0
                img3[i][j]=dst[i][j]
        return img3
    def sobelx(self):
        img=cv.imread('Chihiro.jpg',0)
        img=mygaussianblur(img)
        img=mysobelx(img)
        cv.imshow('res',img)
    def sobely(self):
        img=cv.imread('Chihiro.jpg',0)
        img=mygaussianblur(img)
        img=mysobely(img)
        cv.imshow('res',img)
    def magnitude(self):
        img=cv.imread('Chihiro.jpg',0)
        img3=cv.imread('Chihiro.jpg',0)
        img=mygaussianblur(img)
        img2=img
        img=mysobelx(img)
        img2=mysobely(img2)
        for i in range(0,img.shape[0]):
           for j in range(0,img.shape[1]):
               t=pow(img[i][j],2)+pow(img2[i][j],2)
               img3[i][j]=pow(t,0.5)
               if img3[i][j]>255:
                    img3[i][j]=255
               if img3[i][j]<0:
                    img3[i][j]=0
        cv.imshow('res',img3)
    def transform(self):
        rotation=self.lineEdit.text()
        scale=self.lineEdit_2.text()
        tx=self.lineEdit_3.text()
        ty=self.lineEdit_4.text()
        img=cv.imread('Parrot.png')
        (h,w)=img.shape[:2]
        cv.imshow('original',img)
        M2=np.float32([[1,0,float(tx)],[0,1,float(ty)]])
        shifted=cv.warpAffine(img,M2,(w,h)) 
        center=(160+float(tx),84+float(ty))
        print(center)
        M=cv.getRotationMatrix2D(center,float(rotation),float(scale)) 
        rotated=cv.warpAffine(shifted,M,(w,h))
        cv.imshow('dst',rotated)
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Opencvdl2020 HW1"))
        self.pushButton.setText(_translate("Dialog", "1.1 Load Image"))
        self.pushButton_2.setText(_translate("Dialog", " 1.2 Color Seperation"))
        self.pushButton_3.setText(_translate("Dialog", "1.3 Image Flipping"))
        self.pushButton_4.setText(_translate("Dialog", "1.4 Blending"))
        self.pushButton_5.setText(_translate("Dialog", "2.1 Median Fliter"))
        self.pushButton_6.setText(_translate("Dialog", "2.2 Gaussian Blur"))
        self.pushButton_7.setText(_translate("Dialog", "2.3 Bilateral Filter"))
        self.pushButton_8.setText(_translate("Dialog", "3.1 Gaussian Blur"))
        self.pushButton_9.setText(_translate("Dialog", "3.2 Sobel X"))
        self.pushButton_10.setText(_translate("Dialog", "3.3 Sobel Y"))
        self.pushButton_11.setText(_translate("Dialog", "3.4 Magnitude"))
        self.pushButton_12.setText(_translate("Dialog", "4. Transformation"))
        self.label.setText(_translate("Dialog", "Rotation"))
        self.textEdit_3.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\"> 3.Edge Detection</span></p></body></html>"))
        self.textEdit_4.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">  4.Transformation</span></p></body></html>"))
        self.textEdit.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">1.Image Processing</span></p></body></html>"))
        self.textEdit_2.setHtml(_translate("Dialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-weight:600;\">2.Image  Smoothing</span></p></body></html>"))
        self.label_2.setText(_translate("Dialog", "Scaling"))
        self.label_3.setText(_translate("Dialog", "Tx"))
        self.label_4.setText(_translate("Dialog", "Ty"))

if __name__ == "__main__":
    app = QApplication(sys.argv)
    dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(dialog)
    dialog.show()
    sys.exit(app.exec_())
